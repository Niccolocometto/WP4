#ifndef KERNEL_BUFFERFACTORY_H
#define KERNEL_BUFFERFACTORY_H

#include "../EventBufferInfo.h"
#include "Factory.h"
#include "../../c/raven_api.h"
/**
 * A factory responsible for instantiating EventBuffers.
 *
 * @author Humberto Carvalho (1120409@isep.ipp.pt)
 * @date
 */
template<class T>
class EventBufferFactory : public Factory {
public: //todo buffer_list
    /**
     * Allocates a kernelland EventBuffer.
     *
     * Creates an event buffer of ID id, length length via an ioctl to /dev/raven with a index size of the template type T.
     *
     * Create is synchronized internally.
     *
     * @param id the id of the buffer to create.event_buffers_length of the buffer to create.
     * @param length the array event_buffers_length of the buffer to create.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EFAULT : arg references an inaccessible memory area.
     *  - EEXIST : A buffer with an ID id already exists.
     *  - EINVAL : Request or args are invalid. The array event_buffers_length is invalid if it is equal
     *  to zero or larger than MAX_ARRAY_SIZE, defined as 1936b on 64 bit platforms and 948b on x32 platforms. It is also possible that you forgot to initialize the module with raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *  - ENOMEM : Not enough memory is available to allocate the buffer.
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int buildEventBuffer(const key_t id, const unsigned int length);

    /**
     * Allocates a kernelland EventBuffer.
     *
     * The buffer id will be generated by ftok, which generates an ID from a file and an id.
     *
     * Creates an event buffer of length  length with an id generated by ftok via an ioctl to /dev/raven with an index size of the template type T.
     *
     * Create is synchronized internally.
     *
     * @param file The file to generate the buffer id from.
     * @param id the id to combine with the file. Only the low-order 8-bits of id are significant.
     * @param length the array event_buffers_length of the buffer to create.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EFAULT : arg references an inaccessible memory area.
     *  - EEXIST : A buffer with an ID id already exists.
     *  - EINVAL : Request or args are invalid. The array event_buffers_length is invalid if it is equal
     *  to zero or larger than MAX_ARRAY_SIZE, defined as 1936b on 64 bit platforms and 948b on x32 platforms. It is also possible that you forgot to initialize the module with raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *  - ENOMEM : Not enough memory is available to allocate the buffer.
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int buildEventBuffer(const char *file, int const id, const unsigned int length);

    /**
     * Allocates a kernelland event buffer, and instantiates a matching userland EventBuffer object.
     *
     * Creates an event buffer of ID id, length length via an ioctl to /dev/raven with an index size of the template type T.
     *
     * Create is synchronized internally.
     *
     * @param buffer the buffer to instantiate.
     * @param id the id of the buffer to create.
     * @param length the array event_buffers_length of the buffer to create.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EFAULT : arg references an inaccessible memory area.
     *  - EEXIST : A buffer with an ID id already exists.
     *  - EINVAL : Request or args are invalid. The array event_buffers_length is invalid if it is equal
     *  to zero or larger than MAX_ARRAY_SIZE, defined as 1936b on 64 bit platforms and 948b on x32 platforms. It is also possible that you forgot to initialize the module with raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *  - ENOMEM : Not enough memory is available to allocate the buffer.
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int buildEventBuffer(EventBuffer<T> &buffer, const key_t id, const unsigned int length);

    /**
     * Allocates a kernelland EventBuffer, and instantiates a matching userland EventBuffer object.
     *
     * The buffer id will be generated by ftok, which generates an ID from a file and an id.
     *
     * Creates an event buffer of length  length with an id generated by ftok via an ioctl to /dev/raven with an index size of the template type T.
     *
     * Create is synchronized internally.
     *
     * @param buffer the buffer to instantiate.
     * @param file The file to generate the buffer id from.
     * @param id the id to combine with the file. Only the low-order 8-bits of id are significant.
     * @param length the array event_buffers_length of the buffer to create.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EFAULT : arg references an inaccessible memory area.
     *  - EEXIST : A buffer with an ID id already exists.
     *  - EINVAL : Request or args are invalid. The array event_buffers_length is invalid if it is equal
     *  to zero or larger than MAX_ARRAY_SIZE, defined as 1936b on 64 bit platforms and 948b on x32 platforms. It is also possible that you forgot to initialize the module with raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *  - ENOMEM : Not enough memory is available to allocate the buffer.
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int buildEventBuffer(EventBuffer<T> &buffer, const char *file, int const id, const unsigned int length);

    /**
     * Destroys an event buffer of ID id.
     *
     * Destroys an  event buffer of ID id via an ioctl call to /dev/raven. Destroy is synchronized internally. Only the buffers owner can destroy the buffer.
     *
     * @param id the of the buffer to destroyBuffer.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : No buffer with ID id exists.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EINVAL : Request is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *  - EACCES : The buffer isn't owned by the calling process
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int destroyEventBuffer(const key_t id);

    /**
     * Destroys an event buffer with an id generated by ftok.
     *
     * Destroys an  event buffer of ID id via an ioctl call to /dev/raven. Destroy is synchronized internally. Only the buffers owner can destroy the buffer.
     *
     * @param file The file to generate the buffer id from.
     * @param id the id to combine with the file. Only the low-order 8-bits of id are significant.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : No buffer with ID id exists.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EINVAL : Request is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *  - EACCES : The buffer isn't owned by the calling process
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
    */
    static int destroyEventBuffer(const char *file,int const id);

    /**
     * Destroys an EventBuffer.
     *
     * @param buffer the event buffer to destroy.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : No buffer with ID id exists.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EINVAL : Request is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *  - EACCES : The buffer isn't owned by the calling process
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int destroyEventBuffer(EventBuffer<T> &buffer);

    /**
     * Acquires the Buffer.
     *
     * Changes the buffers owner to the calling process.
     *
     * @arg buffer_id the id of the buffer to acquire
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : No buffer with ID id exists.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EINVAL : Request is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init(). *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int acquireEventBuffer(const key_t id);

    /**
     * Acquires the Buffer with an id generated by ftok.
     *
     * Changes the buffers owner to the calling process.
     *
     * @param file The file to generate the buffer id from.
     * @param id the id to combine with the file. Only the low-order 8-bits of id are significant.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : No buffer with ID id exists.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EINVAL : Request is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init(). *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
 */
    static int acquireEventBuffer(const char *file,int const id);

    /**
     * Acquires the kernelland Buffer, configuring a userside EventBuffer.
     *
     * Changes the buffers owner to the calling process.
     *
     * @arg eventBuffer the event buffer to configure.
     * @arg buffer_id the id of the buffer to acquire
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : No buffer with ID id exists.
     *  - EINVAL : The buffer index length does not match the length of the template type T.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EINVAL : Request is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init(). *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int acquireEventBuffer(EventBuffer<T> &eventBuffer, const key_t id);

    /**
     * Acquires the kernelland Buffer, configuring a userside EventBuffer.
     *
     * Changes the buffers owner to the calling process.
     *
     * @arg eventBuffer the event buffer to configure.
     * @arg file The file to generate the buffer id from.
     * @arg id the id to combine with the file. Only the low-order 8-bits of id are significant.
     *
     * @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : No buffer with ID id exists.
     *  - EINVAL : The buffer index length does not match the length of the template type T.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EINVAL : Request is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init(). *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int acquireEventBuffer(EventBuffer<T> &eventBuffer, const char *file,int const id);

    /**
     * Provides information about a specific Buffer.
     *
     * Provides the following information about a buffer via an ioctl call to /dev/raven:
     *   - the buffer id
     *   - the buffer length
     *   - the data block length
     *   - the last written timespec
     *   - the last overwritten timespec
     *   - the pid of the process who owns this buffer
     *
     *   @param info the buffer info object to store the information.
     *   @param file The file to generate the buffer id from.
     *   @param id the id to combine with the file. Only the low-order 8-bits of id are significant.
     *
     *   @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : The buffer id at event_buffer does not exist.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EFAULT : buffer_list references an inaccessible memory area.
     *  - EINVAL : Request or buffer_list is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int getInformation(EventBufferInfo & info, const char * file, int const id);

    /**
     * Provides information about a specific Buffer.
     *
     * Provides the following information about a buffer via an ioctl call to /dev/raven:
     *   - the buffer id
     *   - the buffer length
     *   - the data block length
     *   - the last written timespec
     *   - the last overwritten timespec
     *   - the pid of the process who owns this buffer
     *
     *   @param info the buffer info object to store the information.
     *   @param id the id to combine with the file. Only the low-order 8-bits of id are significant.
     *
     *   @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     * errno error list:
     *  - ENOENT : The buffer id at event_buffer does not exist.
     *  - EBADF  : fd is not a valid descriptor. Probably you forgot to initialize the module via raven_init().
     *  - EFAULT : buffer_list references an inaccessible memory area.
     *  - EINVAL : Request or buffer_list is not valid. Never thrown inside the module, likely you forgot to initialize via raven_init().
     *  - ENOTTY : fd is not associated with a character special device. Likely you to initialize the module with raven_init().
     *  - ENOTTY : The specified request does not apply to the kind of object that the descriptor d references. Likely you forgot to initialize the module with raven_init().
     *
     *  Please consult your linux manual to see what errno codes ioctl might produce.
     */
    static int getInformation(EventBufferInfo & info, const key_t id);
};

template<class T>
int  EventBufferFactory<T>::buildEventBuffer(EventBuffer<T> &buffer, const char *file, const int id, const unsigned int length){
    key_t buf_id;
    if ((buf_id = getBufferId(file, id)) == (key_t) -1)
        return -1;

    if(raven_buffer_create(buf_id,length,(unsigned short) sizeof(T))) return -1;

    buffer.configure(buf_id,length);
    return 0;
}

template<class T>
int EventBufferFactory<T>::buildEventBuffer(const char *file, int const id, const unsigned int length) {
    key_t buf_id;
    if ((buf_id = getBufferId(file, id)) == (key_t) -1)
        return -1;

    if(raven_buffer_create(buf_id,length,(unsigned short) sizeof(T))) return -1;

    return 0;
}


template<class T>
int EventBufferFactory<T>::buildEventBuffer(EventBuffer<T> &buffer, const key_t id, const unsigned int length) {
   if(raven_buffer_create(id,length,(unsigned short) sizeof(T)))
       return -1;

    buffer.configure(id,length);
    return 0;
}

template<class T>
int EventBufferFactory<T>::destroyEventBuffer(EventBuffer<T> &buffer) {
    return buffer.destroy();
}


template<class T>
int EventBufferFactory<T>::destroyEventBuffer(const key_t id) {
    return raven_buffer_destroy(id);
}

template<class T>
int EventBufferFactory<T>::acquireEventBuffer(const key_t id) {
    return raven_acquire(id);
}

template<class T>
int EventBufferFactory<T>::acquireEventBuffer(EventBuffer<T> & eventBuffer, const key_t id) {
    if(raven_acquire(id)) return -1;

    struct event_buffer_info info;
    if(raven_buffer_info(id,&info)) return -1;

    if(info.index_size!=sizeof(T)){
        errno=EINVAL;
        return -1;
    }

    eventBuffer.configure(id,info.length);
    return 0;
}

template<class T>
int EventBufferFactory<T>::acquireEventBuffer(const char *file, int const id) {
    key_t buf_id;
    if ((buf_id = getBufferId(file, id)) == (key_t) -1)
        return -1;

    if(raven_acquire(buf_id)) return -1;
    return 0;
}

template<class T>
int EventBufferFactory<T>::acquireEventBuffer(EventBuffer<T> & eventBuffer, const char *file, int const id) {
    key_t buf_id;
    if ((buf_id = getBufferId(file, id)) == (key_t) -1)
        return -1;

    if(raven_acquire(buf_id)!=0) return -1;

    struct event_buffer_info info;
    if(raven_buffer_info(id,&info)) return -1;

    if(info.index_size!=sizeof(T)){
        errno=EINVAL;
        return -1;
    }

    eventBuffer.configure(id,info.length);
    return 0;
}

template<class T>
int EventBufferFactory<T>::destroyEventBuffer(const char *file,int const id){
    key_t buf_id;
    if ((buf_id = getBufferId(file, id)) == (key_t) -1)
        return -1;

    if(raven_buffer_destroy(buf_id)) return -1;
    return 0;
}


template<class T>
int EventBufferFactory<T>::buildEventBuffer(const key_t id, const unsigned int length) {
    raven_buffer_create(id,length,(unsigned short) sizeof(T));
}

template<class T>
int EventBufferFactory<T>::getInformation(EventBufferInfo & info, const char * file, int const id){
    key_t buf_id;
    if ((buf_id = getBufferId(file, id)) == (key_t) -1)
        return -1;

    return raven_buffer_info(buf_id, &info.getStructEventBufferInfo());
}
template<class T>
int EventBufferFactory<T>::getInformation(EventBufferInfo & info, const key_t id){
    return raven_buffer_info(id,&info.getStructEventBufferInfo());
}


#endif //KERNEL_BUFFERFACTORY_H

#ifndef KERNEL_EVENTWRITERFACTORY_H
#define KERNEL_EVENTWRITERFACTORY_H

#include "Factory.h"


/**
 * A factory responsible for instantiating EventWriters.
 *
 * @author Humberto Carvalho (1120409@isep.ipp.pt)
 * @date
 */
template<class T>
class EventWriterFactory : public Factory {
public:
    /**
     * Instantiates an EventWriter.
     *
     * Instantiates an EventWriter that pushes events to an EventBuffer on the kernel side. Checks that the size of template type T matches the buffers index length.
     *
     *  The buffer id will be generated by ftok, which generates an ID from a file and an id.
     *
     *  @param writer the EventWriter to instantiate.
     *  @param file the file to generate the id from.
     *  @param id the id to combine with the id generated from the file. Only the low-order 8-bits of id are significant.
     *
     *  @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     *  errno error list:
     *  - ENOENT : The buffer id at event_buffer does not exist.
     *  - EINVAL : The buffer index length does not match the length of the template type T.
     *  Please consult your ftok documentation to see which errors might be produced.
     */
    static int buildEventWriter(EventWriter<T> &writer, const char *file, int const id);

    /**
     * Instantiates an EventWriter.
     *
     * Instantiates an EventWriter that pushes events to an EventBuffer on the kernel side. Checks that the size of template type T matches the buffers index length.
     *
     * @param writer The writer to configure
     * @param id The buffers id.
     *
     *  @return returns 0 on success. On error -1 is returned and errno is set appropriately.
     *
     *  errno error list:
     *  - ENOENT : The buffer id at event_buffer does not exist.
     *  - EINVAL : The buffer index length does not match the length of the template type T.
     */
    static int buildEventWriter(EventWriter<T> &writer, const key_t id);

    /**
     * Instantiates an EventWriter.
     *
     * Instantiates an EventWriter from an EventBuffer, the EventWriter will push events to the Buffer.
     *
     * @param writer The writer to configure.
     * @param eventBuffer The buffer to configure the event writer to.
     */
    static void buildEventWriter(EventWriter<T> &writer, EventBuffer<T> eventBuffer);
};

template<class T>
int EventWriterFactory<T>::buildEventWriter(EventWriter<T> &writer, const char *file, int const id) {
    key_t buf_id;
    if ((buf_id = getBufferId(file, id)) == (key_t) -1)
        return -1;

    struct event_buffer_info info;
    if(raven_buffer_info(id,&info)) return -1;

    if(info.index_size!=sizeof(T)){
        errno=EINVAL;
        return -1;
    }

    writer.configure(buf_id);
    return 0;
}

template<class T>
int EventWriterFactory<T>::buildEventWriter(EventWriter<T> &writer, const key_t id) {
    struct event_buffer_info info;
    if(raven_buffer_info(id,&info)) return -1;

    if(info.index_size!=sizeof(T)){
        errno=EINVAL;
        return -1;
    }

    writer.configure(id);
}

template<class T>
void EventWriterFactory<T>::buildEventWriter(EventWriter<T> &writer, EventBuffer<T> eventBuffer) {
    writer.configure(eventBuffer.getID());
}

#endif //KERNEL_EVENTWRITERFACTORY_H
